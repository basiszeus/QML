{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b97953b9",
   "metadata": {},
   "source": [
    "## Quantum Mesurements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d688eae5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial State: [0.70710678]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Define the initial state (superposition of Heads and Tails)\n",
    "psi0 = 1/np.sqrt(2) * (np.array([1]) + np.array([1])) / np.linalg.norm((np.array([1]) + np.array([1])))\n",
    "\n",
    "print(\"Initial State:\", psi0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4f7fb9cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collapsed State: [0.70710678]\n"
     ]
    }
   ],
   "source": [
    "def measure(psi):\n",
    "    # Define the measurement operator (ket-bra notation)\n",
    "    M  = np.outer(np.array([1]), np.array([1]))  # |H( H| + |T(T|\n",
    "\n",
    "    # Collapse the superposition using the measurement operator\n",
    "    psi_collapsed = np.dot(M, psi)\n",
    "\n",
    "    return psi_collapsed\n",
    "\n",
    "psi_collapsed = measure(psi0)\n",
    "print(\"Collapsed State:\", psi_collapsed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3e79e1c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Observable: 0\n",
      "Heads!\n"
     ]
    }
   ],
   "source": [
    "# Define the observable ( Heads or Tails)\n",
    "observable = np.argmax(psi_collapsed)  # 0 for Heads, 1 for Tails\n",
    "\n",
    "print(\"Observable:\", observable)\n",
    "\n",
    "if observable == 0:\n",
    "    print(\"Heads!\")\n",
    "else:\n",
    "    print(\"Tails!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30be20d6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31761c32",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
